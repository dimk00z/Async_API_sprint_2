version: '3'
services:
  # postges_movie_db:
  #   container_name: postges_movie_db
  #   image: postgres:13.4
  #   restart: always
  #   expose: 
  #     - "5432"
  #   volumes: 
  #     - ../postgres:/var/lib/postgresql/data
  #   networks:
  #     - movie_project_net
  #   env_file:
  #     - .env
  
  movies_elastic:
    container_name: movies_elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
    environment:
    - discovery.type=single-node
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    restart: always
    #порт отставлен для проверки индекса
    ports:
      - 9200:9200
    expose:
      - "9200"
    networks:
      - movie_project_net
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
  
  movies_redis:
    container_name: movies_redis
    image: redis:alpine
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    expose:
      - "6379"
    networks:
      - movie_project_net
    
  # movies_admin:
  #   container_name: movies_admin
  #   build:
  #     context: ./movies_admin
  #     dockerfile: Dockerfile
  #   command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
  #   restart: always
  #   expose:
  #     - "8000"
  #   env_file: 
  #     - .env
  #   volumes:
  #     - static_volume:/code/staticfiles
  #   depends_on: 
  #     - postges_movie_db
  #   networks:
  #     - movie_project_net

  # movies_async_api:
  #   container_name: movies_async_api
  #   build:
  #     context: ./async_api
  #     dockerfile: Dockerfile
  #   command: >
  #     uvicorn main:app
  #       --host 0.0.0.0
  #       --port 8000
  #       --workers 1
  #       --use-colors
  #   restart: always
  #   ports:
  #     - "8000:8000"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - movies_elastic
  #     - movies_redis
  #   networks:
  #     - movie_project_net

  # movies_nginx:
  #   container_name: movies_nginx
  #   build: 
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   volumes:
  #     - static_volume:/code/staticfiles
  #   restart: always
  #   ports:
  #     - 80:80
  #   depends_on:
  #     - movies_admin
  #   networks:
  #     - movie_project_net

  # postgres_to_es:
  #   container_name: postgres_to_es
  #   build:
  #     context: ./postgres_to_es
  #     dockerfile: Dockerfile
  #   command: python main.py
  #   restart: always
  #   env_file: 
  #     - .env
  #   volumes:
  #     - static_volume:/code/staticfiles
  #   depends_on: 
  #     - movies_redis
  #     - movies_elastic
  #     - postges_movie_db
  #   networks:
  #     - movie_project_net

volumes:
  # static_volume:
  redis_data:
  elasticsearch-data:
    driver: local

networks:
  movie_project_net:
    name: movie_project_net
    driver: bridge